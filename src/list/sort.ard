\import Function
\import Logic
\import Order.Lattice
\import Order.PartialOrder
\import Paths
\import list
\import order
\open Nat
\open List (discriminate, ::-injective)

\data ListIsOrdered {A : \Set} {po : Poset A} (l : List A) \with
  | nil => ord-nil
  | :: a nil =>  ord-single
  | :: a (:: b t) => ord-cons (a <= b) (ListIsOrdered (b :: t)) \where {
  \use \level orderedList-is-prop {A : \Set} {po : Poset A} {l : List A} (o1 o2 : ListIsOrdered l) : o1 = o2 \elim l, o1, o2
    | nil, ord-nil , ord-nil =>  idp
    | :: _ nil, ord-single, ord-single => idp
    | :: a (:: b t), ord-cons p1 next1, ord-cons p2 next2 => pmap2 ord-cons (Path.inProp _ _) (Path.inProp _ _)

  \lemma tailIsOrdered {A : \Set} {po : Poset A} {a : A} {l : List A} (p : ListIsOrdered (a :: l)): ListIsOrdered l \elim l, p
    | nil, ord-single => ord-nil
    | :: b t, ord-cons a<=b next => next

  \lemma head-is-min {A : \Set} {po : Poset A} {a : A} {l : List A} (p : ListIsOrdered (a :: l)) : a <= List.head a l \elim l, p
    | nil, _ => <=-reflexive _
    | :: b t, ord-cons a<=b p =>  a<=b
}

\func sort {A : \Set} {la : Lattice A} (as : List A) : List A
  | nil => nil
  | :: a t => insert a (sort t)

  \where {
    \open ListIsOrdered

    \func insert{A : \Set} {la : Lattice A} (a : A) (as : List A)  : List A \elim as
      | nil => a :: nil
      | :: b t => (join a b) :: insert (meet a b) t

    \lemma insSort-sorting {A : \Set} {la : Lattice A} (as : List A) : ListIsOrdered (sort as)
      | nil => ord-nil
      | :: a t => insert-keeps-order a (sort t) (insSort-sorting t)

    \lemma insert-keeps-order {A : \Set} {la : Lattice A} (a : A) (as : List A) (od : ListIsOrdered as) : ListIsOrdered (insert a as) =>
      \let ins : Inserted a as => insert-cons a as od
      \in transport ListIsOrdered ins.el ins.od

    \record Inserted  {A : \Set} {la : Lattice A} (a : A) (as : List A){
      | h : A
      | tail : List A
      | od : ListIsOrdered (h :: tail)
      | el : h :: tail = insert a as
      | eh : join (List.head a as) a = h
    }

    \open JoinSemilattice

    \func insert-cons {A : \Set} {la : Lattice A} (a : A) (as : List A) (od : ListIsOrdered as) : Inserted a as \elim as
      | nil => inil a
      | :: b t =>
        \let r => insert-cons (meet a b) t (tailIsOrdered od)
        \in icons a b t od r
      \where {
        \open List

        \func inil {A : \Set} {la : Lattice A} (a : A) : Inserted a nil \cowith
          | h => a
          | tail => nil
          | od => ord-single
          | el => idp
          | eh => join-idemp _

        \func icons {A : \Set} {la : Lattice A} (a b : A) (as : List A)
                    (od : ListIsOrdered (b :: as)) (rec : Inserted (meet a b) as)
          : Inserted a (b :: as) \cowith
          | h => join a b
          | tail => insert (meet a b) as
          | od =>
            \let  | h'<=h : join a b <= head (meet a b) as => join-right _ _ ~*> head-is-min od ~*> head-monotone _ _ _ (meet-right _ _)
                  | ie : join a b <= join (head (meet a b) as) (meet a b) => join-univ _ _ _ h'<=h (join<=meet _ _)
            \in transport (\lam l => ListIsOrdered (join a b :: l)) rec.el  (ord-cons (transport (<= (join a b)) rec.eh ie) rec.od)
          | el => idp
          | eh => join-comm _ _
      }

    \module comm \where{
      \func insert2 {A : \Set} {la : Lattice A} (a b : A) (as : List A) : List A => insert a (insert b as)
    }
  }