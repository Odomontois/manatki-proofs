\import Paths
\import funs
\import list
\open  List
\import Function
\open Exchange

\record BaseStruct {A : \Type} (P : List A -> \Type)

\record Exchange \extends BaseStruct {
  | swap {l l' : List A} {a a' : A} : P (l ++ a :: a' :: l') -> P (l ++ a' :: a :: l')

  \func swap-head {l : List A} {a a' : A} : P (a :: a' :: l) ->  P (a' :: a :: l) => swap {\this} {nil}

  \func exchange {l l' l'' : List A} {a a' : A} (b : P(l ++ a :: l' ++ a' :: l'')) : P (l ++ a' :: l' ++ a :: l'') \elim  l'
    | nil => swap b
    | :: c l' =>
      swap $
      transport P (List.assoc l (single c) _) $
      exchange $
      transportInv P (List.assoc l (single c) _) $
      swap b

  \func push {l l' l'' : List A} {a : A} (p : P (l ++ a :: (l' ++ l''))) : P (l ++ l' ++ a :: l'') \elim l'
    | nil => p
    | :: c l' =>
      transport P (List.assoc l (single c) _ ) $
      push $
      transportInv P (List.assoc l (single c) _ ) $
      swap p

  \func push-head {l l' : List A} {a : A} : P (a :: (l ++ l')) -> P (l ++ a :: l') => push {_} {nil}

  \func pull {l l' l'' : List A} {a : A} (p : P (l ++ l' ++ a :: l'')) : P (l ++ a :: (l' ++ l'')) \elim l'
    | nil => p
    | :: c l' =>
      swap $
      transport P (List.assoc l (single c) _ ) $
      pull $
      transportInv P (List.assoc l (single c) _ ) p

  \func pull-head {l l' : List A} {a : A} : P (l ++ a :: l') -> P (a :: (l ++ l')) => pull {_} {nil}
}

\record Weakening \extends BaseStruct{
  | weak {l : List A} {a : A} (p : P l) : P (a :: l)

  \func weakMany {l l' : List A} (p : P l) : P (l' ++ l) \elim l'
    | nil => p
    | :: a l' => weak $ weakMany p
}

\record Contraction \extends BaseStruct{
  | contract {l : List A} {a : A} (l' : List A) (i : Index a l) (p : P (l' ++ a :: l)) : P (l' ++ l)

  \func contract0 {l : List A} {a : A}  : Index a l -> P (a :: l) -> P l => contract nil
}

\record Structural \extends Exchange, Weakening, Contraction{
  \func weak-in {l : List A} {a : A} (l' : List A) : P (l' ++ l) -> P (l' ++ a :: l) => push-head o weak
}