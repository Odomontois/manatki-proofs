\import Logic
\import Logic.Meta
\import Paths
\import Paths.Meta
\import arith.nat
\import funs
\import list
\import Function
\import list.structural
\import Arith.Nat
\import Order.PartialOrder
\import Algebra.Monoid
\import Category (Precat)
\open Precat (>>)
\open Structural
\open Weakening
\open Contraction

\data Type (T : \Set)
  | just T
  | \infixr 7 --> (Type T) (Type T)
  | [] (List (Type T)) (Type T) \where {
  \func unarr {T : \Set} (C d : Type T): \Sigma (Type T) (Type T) \elim C
    | --> A B => (A, B)
    | _ => (d, d)

  \func unbox {T : \Set} (C d : Type T): \Sigma (Ctx T) (Type T) \elim C
    | [] X A => (X, A)
    | _ => (single d, d)

  \lemma inject-> {T : \Set} {A B A' B' : Type T} (p : (A --> B) = (A' --> B')) : \Sigma (A = A') (B = B') =>
    (pmap (\lam x => (unarr x A).1) p , pmap (\lam x => (unarr x A).2) p)

  \lemma inject[] {T : \Set} {A A' : Type T} {X X' : Ctx T} (p : ([] X A) = ([] X' A')) : \Sigma (X = X') (A = A') =>
    (pmap (\lam x => (unbox x A).1) p , pmap (\lam x => (unbox x A).2) p)
}

\func Ctx (T : \Set) : \Set => List (Type T)

\func Valid (T : \Set) : \Set => List (\Sigma (Type T) (Ctx T))

\cons \infixr 8 []> {T : \Set} (A B : Type T) : Type T => [] (single A) B

\open List \hiding (at)
\open Index \hiding (at, swap-head, swap)
\open Exchange

\data ICML {T : \Set} (D : Valid T) (G R : Ctx T) \elim R
  | single A => hyp (Index A G)
  | single A => ctxhyp {X : Ctx T} (Index (A, X) D) (ICML D G X)
  | single (-->  A B) => I-> (ICML D (A :: G) (single B))
  | single B => E-> (A : Type T) (ICML D G (single (A --> B))) (ICML D G (single A))
  | single ([] X A) => I[] (ICML D X (single A))
  | single C => E[] (X : Ctx T) (A : Type T) (ICML D G (single ([] X A))) (ICML ((A, X) :: D) G (single C))
  | :: A B => ctx:: (ICML D G (single A)) (ICML D G B)
  | nil => ctxnil \where {
  \func Stat {T : \Set} (t : Type T) : \Set => ICML nil nil (single t)

  \func example-[1] {T : \Set} (C D A : Type T):  Stat $ C []> A --> [] (C :: D :: nil) A =>
    I-> $ E[] (single C) A (hyp @0) $  I[] $ ctxhyp @0 $ hyp @0

  \func example-[2] {T : \Set} (C D A : Type T): Stat $ [] (C :: C :: nil) A --> C []> A =>
    I-> $ E[] (C :: C :: nil) A (hyp @0) $ I[] $ ctxhyp  @0 $ ctx:: (hyp @0) $ hyp @0

  \func example-[3] {T : \Set} (A : Type T): Stat $ A []> A => I[] $ hyp @0

  \func example-[4] {T : \Set} (A B C : Type T): Stat $ A []> B --> A []>  B []>  C --> A []> C =>
    I->      $
    E[] (single A) B (hyp @0) $
    I-> $
    E[] (single A) ([] (single B) C) (hyp @0) $
    I[] $
    E[] (single B) C (ctxhyp @0 (hyp @0)) $
    ctxhyp @0 $ ctxhyp @2 (hyp @0)

  \func example-[5] {T : \Set} (A : Type T) : Stat (([] nil A)  --> A) =>
    I-> $ E[] nil A (hyp @0) (ctxhyp @0 ctxnil)

  \func example-[6] {T : \Set} (A C D : Type T) : Stat $ C []> A --> D []> C []> A =>
    I-> $ E[] (single C) A (hyp @0) $ I[] $ I[] $ ctxhyp @0 (hyp @0)

  \func example-[7] {T : \Set} (A B C D : Type T) : Stat $ C []> (A --> B) --> D []> A --> ([] (C :: D :: nil) B) =>
    I-> $
    I-> $
    E[] (single C) (A --> B) (hyp @1) $
    E[] (single D) A (hyp @0) $
    I[] $
    E-> A (ctxhyp @1 (hyp @0)) (ctxhyp @0 (hyp @1))

  \func example-[8] {T : \Set} (A B C : Type T) : Stat $ A []> (A --> B) --> B []> C --> A []> C =>
    I-> $
    I-> $
    E[] (single A) (A --> B) (hyp @1) $
    E[] (single B) C (hyp @0) $
    I[] $
    ctxhyp @0 $
    E-> A (ctxhyp @1 $ hyp @0) $ hyp @0
}

\module Seq \where{
  \data SICML {T : \Set} (D : Valid T) (G R : Ctx T) \elim R
    | single (just _ \as p)  => init (Index p G)
    | single C => reflect {A : Type T} {X : Ctx T} (Index (A, X) D) (SICML D G X) (SICML D (A :: G) (single C))
    | single (--> A B) => ->R (SICML D (A :: G) (single B))
    | single C => ->L {A B : Type T} (Index (A --> B) G) (SICML D G (single A)) (SICML D (B :: G) (single C))
    | single ([] X A) => []R (SICML D X (single A))
    | single C => []L {A : Type T} {X : Ctx T} (Index ([] X A) G) (SICML ((A, X) :: D) G (single C))
    | nil => nilctx
    | :: A R => ::ctx (SICML D G (single A)) (SICML D G R) \where {
    \func \infix 2 ==> {T : \Set} (GD : \Sigma  (Valid T) (Ctx T)) (C : Type T) : \Set
      | (D, G), C => SICML D G (single C)

    \func swap-G {T : \Set} {D : Valid T} {G R : Ctx T} (G' : Ctx T) {A' B' : Type T}
                 (p : SICML D (G' ++ A' :: B' :: G) R) : SICML D (G' ++ B' :: A' :: G) R =>
      NSeq.erase $ NSeq.swap-G G' $ (NSeq.enumerate p).2

    \func swap-D {T : \Set} {D : Valid T} {G R X Y : Ctx T} (D' : Valid T) {A' B' : Type T}
                 (p : SICML (D' ++ (A', X) :: (B', Y) :: D) G R) : SICML (D' ++ (B', Y) :: (A', X) :: D) G R =>
      NSeq.erase $ NSeq.swap-D D' $ (NSeq.enumerate p).2

    \func sym-G {T : \Set} {D : Valid T} {R : Ctx T}: Exchange (SICML D __ R) \cowith
      | swap p => swap-G _ p

    \func sym-D {T : \Set} {G R : Ctx T}: Exchange (SICML __ G R) \cowith
      | swap p => swap-D _ p

    \func Weak-D {T : \Set} {D : Valid T}  {G Y R : Ctx T} {E : Type T} (p : SICML D G R): SICML ((E, Y) :: D) G R =>
      NSeq.erase $ NSeq.Weak-D $ (NSeq.enumerate p).2

    \func Weak-G {T : \Set} {D : Valid T}  {G R : Ctx T} {E : Type T} (p : SICML D G R): SICML D (E :: G) R =>
      NSeq.erase $ NSeq.Weak-G $ (NSeq.enumerate p).2

    \func Identity {T : \Set} {D : Valid T} {G R : Ctx T}  : SICML D (R ++ G) R \elim R
      | nil => nilctx
      | :: (just t) R => ::ctx (init @0) $ pull-head {sym-G} Identity
      | :: (--> A B) R => ::ctx (->R $ ->L @1 Identity Identity) $ pull-head {sym-G} Identity
      | ::  ([] X A) R =>
        ::ctx ([]L @0 $
        []R $
        reflect @0 (transport (SICML _ __ X) (List.++nil X) Identity) Identity) $
        pull-head {sym-G} Identity

    \func Contract-g {T : \Set} {D : Valid T} {G R : Ctx T} {A' : Type T} (G' : Ctx T) (e : Index A' G) (p : SICML D (G' ++ A' :: G) R) :
      SICML D (G' ++ G) R => NSeq.erase $ NSeq.Contract-G G' e $ (NSeq.enumerate p).2

    --    \func Cut-0 {T : \Set} {D : Valid T}  {I : Type T} {G R : Ctx T}
    --                (p1 : (D, G) ==> I) (p2 : SICML D (I :: G) R) : SICML D G R =>
    --      NSeq.erase $ (NSeq.Cut (NSeq.enumerate p1).2 (NSeq.enumerate p2).2).2
  }

  \module NSeq \where{
    \data SICML {T : \Set} (n : Nat) (D : Valid T) (G R : Ctx T) \elim n, R
      | n, single (just _ \as p)  => init (Index p G)
      | suc n, single C => reflect {A : Type T} {X : Ctx T} (Index (A, X) D) (SICML n D G X) (SICML n D (A :: G) (single C))
      | suc n, single (--> A B) => ->R (SICML n D (A :: G) (single B))
      | suc n, single C => ->L {A B : Type T} (Index (A --> B) G) (SICML n D G (single A)) (SICML n D (B :: G) (single C))
      | suc n, single ([] X A) => []R (SICML n D X (single A))
      | suc n, single C => []L {A : Type T} {X : Ctx T} (Index ([] X A) G) (SICML n ((A, X) :: D) G (single C))
      | n , nil => nilctx
      | n, :: A R => ::ctx (SICML n D G (single A)) (SICML n D G R)
      | suc n, X => bump (SICML n D G X)

    \func swap-G {T : \Set} {n : Nat}{D : Valid T} {G R : Ctx T} (G' : Ctx T) {A' B' : Type T}
                 (p : SICML n D (G' ++ A' :: B' :: G) R) : SICML n D (G' ++ B' :: A' :: G) R \elim n, R, p
      | n, single (just _ \as p), init i => init $ Index.swap i
      | suc n, single C, reflect {A} e1 px ac => reflect e1 (swap-G _ px) $ swap-G (A :: G') ac
      | suc n, single (--> A B), ->R px => ->R $ swap-G (A :: G') px
      | suc n, single C, ->L {A} {B} i l r => ->L (Index.swap i) (swap-G _ l) (swap-G (B :: G') r)
      | suc n, single ([] X A), []R p => []R p
      | suc n, single C, []L {A} i p => []L (Index.swap i) (swap-G _ p)
      | n, nil, nilctx => nilctx
      | n, :: C R, ::ctx h t => ::ctx (swap-G _ h) (swap-G _ t)
      | suc n, R, bump p => bump $ swap-G _ p

    \func swap-D {T : \Set} {n : Nat} {D : Valid T} {G R X Y : Ctx T} (D' : Valid T) {A' B' : Type T}
                 (p : SICML n (D' ++ (A', X) :: (B', Y) :: D) G R) : SICML n (D' ++ (B', Y) :: (A', X) :: D) G R \elim n, R, p
      | n, single (just _ \as p), init i => init  i
      | suc n, single C, reflect {A} e1 px ac => reflect (Index.swap e1) (swap-D _ px) (swap-D _ ac)
      | suc n, single (--> A B), ->R px => ->R $ swap-D _ px
      | suc n, single C, ->L {A} {B} i l r => ->L i (swap-D _ l) (swap-D _ r)
      | suc n, single ([] X A), []R p => []R $ swap-D _ p
      | suc n, single C, []L {A} {X} i p => []L i $ swap-D ((A, X) :: D') p
      | n, nil, nilctx => nilctx
      | n, :: C R, ::ctx h t => ::ctx (swap-D _ h) (swap-D _ t)
      | suc n, R, bump p => bump $ swap-D _ p

    \func Weak-D {T : \Set} {n : Nat} {D : Valid T}  {G Y R : Ctx T} {E : Type T} (p : SICML n D G R): SICML n ((E, Y) :: D) G R \elim n, R, p
      | n, single (just _), init pc => init pc
      | suc n, single C, reflect e px ac => reflect (There e) (Weak-D px) (Weak-D ac)
      | suc n, single (--> A B), ->R px => ->R $ Weak-D px
      | suc n, single C, ->L i l r => ->L i (Weak-D l) (Weak-D r)
      | suc n, single ([] X A), []R p => []R $ Weak-D p
      | suc n, single C, []L i p => []L i $ swap-head {sym-D} $ Weak-D p
      | n, nil, nilctx => nilctx
      | n, :: C R, ::ctx h t => ::ctx (Weak-D h) (Weak-D t)
      | suc n, R, bump p => bump $ Weak-D p

    \func Weak-G {T : \Set} {n : Nat} {D : Valid T}  {G R : Ctx T} {E : Type T} (p : SICML n D G R): SICML n D (E :: G) R \elim n, R, p
      | n, single (just _), init pc => init (There pc)
      | suc n, single C, reflect e px ac => reflect e (Weak-G px) $ swap-head {sym-G} $ Weak-G ac
      | suc n, single (--> A B), ->R px => ->R $ Exchange.swap-head {sym-G} $ Weak-G px
      | suc n, single C, ->L i l r => ->L (There i) (Weak-G l) $ swap-head {sym-G} $ Weak-G r
      | suc n, single ([] X A), []R p => []R p
      | suc n, single C, []L i p => []L (There i) $ Weak-G p
      | n, nil, nilctx => nilctx
      | n, :: C R, ::ctx h t => ::ctx (Weak-G h) (Weak-G t)
      | suc n, R, bump p => bump $ Weak-G p

    \func Contract-G {T : \Set} {n : Nat} {D : Valid T} {G R : Ctx T} {A' : Type T} (G' : Ctx T) (e : Index A' G) (p : SICML n D (G' ++ A' :: G) R) :
      SICML n D (G' ++ G) R \elim n, R,  p
      | n, single (just _), init i => init $ squash-with e i
      | suc n, single C, reflect {A} i l r =>
        reflect i (Contract-G G' e l) $ Contract-G (A :: G') e r
      | suc n, single (--> A B), ->R p => ->R $ Contract-G (A :: G') e p
      | suc n, single C, ->L {A} {B} i l r => ->L (squash-with e i) (Contract-G G' e l) $ Contract-G (B :: G') e r
      | suc n, single ([] A B), []R p => []R p
      | suc n, single C, []L i p => []L (squash-with e i) $ Contract-G G' e p
      | n, nil , nilctx => nilctx
      | n, :: C R , ::ctx p pr => ::ctx (Contract-G G' e p) (Contract-G G' e pr)
      | suc n, R, bump p => bump $ Contract-G G' e p

    \func Contract-D {T : \Set} {n : Nat} {D : Valid T} {G R X : Ctx T} {A' : Type T} (D' : Valid T) (e : Index (A', X) D)
                     (p : SICML n (D' ++ (A', X) :: D) G R) :
      SICML n (D' ++ D) G  R \elim n, R,  p
      | n, single (just _), init i => init i
      | suc n, single C, reflect {A} {Y} i l r => reflect (squash-with e i) (Contract-D D' e l) (Contract-D D' e r)
      | suc n, single (--> A B), ->R p => ->R $ Contract-D D' e p
      | suc n, single C, ->L {A} {B} i l r => ->L i (Contract-D D' e l) (Contract-D D' e r)
      | suc n, single ([] A B), []R p => []R $ Contract-D D' e p
      | suc n, single C, []L {B} {Y} i p => []L i $ Contract-D ((B, Y) :: D') e p
      | n, nil , nilctx => nilctx
      | n, :: C R , ::ctx p pr => ::ctx (Contract-D D' e p) (Contract-D D' e pr)
      | suc n, R, bump p => bump $ Contract-D D' e p

    \func sym-G {T : \Set} {n : Nat} {D : Valid T} {R : Ctx T}: Exchange (SICML n D __ R) \cowith
      | swap p => swap-G _ p

    \func sym-D {T : \Set} {n : Nat} {G R : Ctx T}: Exchange (SICML n __ G R) \cowith
      | swap p => swap-D _ p

    \func sG {T : \Set} {n : Nat} {D : Valid T} {R : Ctx T}: Structural (SICML n D __ R) \cowith
      | swap p => swap-G _ p
      | weak p => Weak-G p
      | contract l => Contract-G l

    \func sD {T : \Set} {n : Nat} {G R : Ctx T}: Structural (SICML n __ G R) \cowith
      | swap p => swap-D _ p
      | weak p => Weak-D p
      | contract l => Contract-D l

    \open Nat (zero<=_, suc<=suc)

    \func \infixl 9 bump+ {T : \Set} {n :  Nat} {D : Valid T} {G R : Ctx T} (s : SICML n D G R) (m : Nat)  : SICML (n + m) D G R \elim m
      | 0 => s
      | suc m => bump $ s bump+ m

    \func bump-up {T : \Set} {n m :  Nat} {D : Valid T} {G R : Ctx T} (p : n <= m) (s : SICML n D G R) : SICML m D G R =>
      \let (k, p') => diff p
      \in transport (SICML __ D G R) p' $ s bump+ k

    \func unify {T : \Set} {D D' : Valid T} {G G' R R' : Ctx T} (a : \Sigma (n : Nat) (SICML n D G R)) (b : \Sigma (n : Nat) (SICML n D' G' R')):
      (\Sigma (n : Nat) (SICML n D G R) (SICML n D' G' R')) =>
      (max a.1 b.1 , bump-up left-max a.2, bump-up right-max b.2)

    \func SICML! {T : \Set} (D : Valid T) (G R : Ctx T) => \Sigma  (n : Nat) (SICML n D G R)

    \func init! {T : \Set} {D : Valid T} {G : Ctx T} {P : T} (p : Index (just P) G) :  SICML! D G (single (just P)) =>
      (0, init p)

    \func reflect! {T : \Set} {D : Valid T} {G X : Ctx T} {A C : Type T}
                   (i : Index (A, X) D) (l : SICML! D G X) (r : SICML! D (A :: G) (single C)) : SICML! D G (single C) =>
      \let (n, sl, sr) => unify l r \in (suc n, reflect i sl sr)

    \func ->R! {T : \Set} {D : Valid T} {G : Ctx T} {A B : Type T} (p : SICML! D (A :: G) (single B)) : SICML! D G $ single $ A --> B =>
      \let (n, s) => p \in (suc n, ->R s)

    \func ->L! {T : \Set} {D : Valid T} {G : Ctx T} {A B C : Type T}
               (i : Index (A --> B) G) (l : SICML! D G (single A)) (r : SICML! D (B :: G) (single C)) : SICML! D  G (single C) =>
      \let (n, sl, sr) => unify l r \in (suc n, ->L i sl sr )

    \func []R! {T : \Set} {D : Valid T} {G X : Ctx T} {A : Type T}
               (p : SICML! D X (single A)) : SICML! D G $ single $ [] X A =>
      \let (n, r) => p \in (suc n, []R r)

    \func []L! {T : \Set} {D : Valid T} {G X : Ctx T} {A C : Type T}
               (i : Index ([] X A) G) (p : SICML! ((A, X) :: D) G (single C)) : SICML! D G (single C) =>
      \let (n, p') => p \in (suc n, []L i p')

    \func nilctx! {T : \Set} {D : Valid T} {G : Ctx T} : SICML! D G nil => (0, nilctx)

    \func ::ctx! {T : \Set} {D : Valid T} {G R : Ctx T} {A : Type T}
                 (h : SICML! D G (single A)) (t : SICML! D G R) : SICML! D G (A :: R) =>
      \let (n, sh, st) => unify h t \in (n, ::ctx sh st)

    \func enumerate {T : \Set} {D : Valid T} {G R : Ctx T} (us : Seq.SICML D G R) : SICML! D G R  \elim  R, us
      | nil, Seq.nilctx => nilctx!
      | single (just _ ), Seq.init p1 => init! p1
      | single C, Seq.reflect i l r => reflect! i (enumerate l) (enumerate r)
      | single (--> A B),  Seq.->R p => ->R! $ enumerate p
      | single C , Seq.->L i l r => ->L! i (enumerate l) (enumerate r)
      | single ([] X A), Seq.[]R p => []R! $ enumerate p
      | single C, Seq.[]L i p => []L! i $ enumerate p
      | :: A R, Seq.::ctx h t => ::ctx! (enumerate h) (enumerate t)

    \func erase {T : \Set} {n : Nat}{D : Valid T} {G R : Ctx T} (us : SICML n D G R) : Seq.SICML D G R  \elim  n, R, us
      | n, nil, nilctx => Seq.nilctx
      | n, single (just _ ), init p1 => Seq.init p1
      | suc n, single C, reflect i l r => Seq.reflect i (erase l) (erase r)
      | suc n, single (--> A B),  ->R p => Seq.->R (erase p)
      | suc n, single C , ->L i l r => Seq.->L i (erase l) (erase r)
      | suc n, single ([] X A), []R p => Seq.[]R (erase p)
      | suc n, single C, []L i p => Seq.[]L i (erase p)
      | n, :: A R, ::ctx h t => Seq.::ctx (erase h) (erase t)
      | suc n, R , bump p => erase p

    \func Identity {T : \Set} {D : Valid T} {G R : Ctx T}  : \Sigma (n : Nat) (SICML n D (R ++ G) R) =>
      enumerate Seq.SICML.Identity

    \func Cut {T : \Set} {k n : Nat} {D : Valid T} {I : Type T} {G R : Ctx T}
              (p1 : SICML k D G (single I)) (p2 : SICML n D (I :: G) R) : SICML! D G R \elim k, n, I, R, p1, p2
      --- BOLERPLATE START. SKIP IT ---
      | suc k, n, I, R,  bump p1, p2 => Cut p1 p2
      | k, suc n, I , R, p1, bump p => Cut p1 p
      | k, n, I, single C, ::ctx p1 _, p2 => Cut p1 p2
      | 0, n, I, single (--> A B), p1,  ::ctx p2 _ => Cut p1 p2
      | 0, n, I, single C, p1,  ::ctx p2 _ => Cut p1 p2
      | suc k, n, I, single C, p1,  ::ctx p2 _ => Cut p1 p2
      | k, n, I, :: C R, p1,  ::ctx p2 r => ::ctx! (Cut p1 p2) (Cut p1 r)
      | k, n, I, nil, p1, nilctx => nilctx!
      --- BOILERPLATE END ---
      | suc k, n, I , single C , reflect {A} j l r, p2 => reflect! j (k, l) $ Cut r $ weak-in {sG} (single I) p2
      | k, suc n, I , single C, p1, reflect  j l r => reflect! j (Cut  p1  l) $ Cut (weak {sG} p1) $ swap-head {sG} r
      | k, suc n, I , single (--> A B), p1, ->R p => ->R! $ Cut (weak {sG} p1) (swap-head {sG} p)
      | k, suc n, I , single ([] X A), p1,  []R p => []R! (n, p)
      | suc k, n, I, single C, ->L {A} {B} i l r, p2 => ->L! i (k, l) $ Cut r $ swap-head {sG} $ weak {sG} p2
      | suc k, n, I, single C, []L {A} i p1, p2 => []L! i $ Cut p1 $ weak {sD} p2
      | k, n, just _ , single (just _), init i, init j => init! $ squash-0 i j
      | k, suc n, just _ , single C, init i, ->L (Here p) l r => contradiction
      | k, suc n, just _ , single C, init i, ->L {A} {B} (There j) l r =>
        ->L! j (n, contract0 {sG} i l) (n, contract {sG} (single B) i r)
      | k, suc n, just _ , single C, init i, []L j p => []L! (squash-0 i j) (n, contract0 {sG} i p)
      | suc k, n, --> A B, single (just _), ->R p1, init (Here e) => contradiction
      | suc k, n, --> A B, single (just _), ->R p1, init (There j) => init! j
      | suc k, n, [] X A, single (just _), []R p1, init (Here e) => contradiction
      | suc k, n, [] X A, single (just _), []R p1, init (There j) => init! j
      | suc k, suc n, I, single C, p1, ->L {A'} {B'} (There j) l r =>
        ->L! j (Cut p1 l) $ Cut (Weak-G p1) (swap-head {sG} r)
      -- substitution part, stolen from clayrat
      | suc k, suc n, --> A B , single C, ->R p1, ->L {A'} {B'} (Here e) l r =>
        \let | (pa, pb) => Type.inject-> e
             | l' => transport (SICML n D (A --> B :: G) $ single __) pa l
             | r' => transport (\lam b => SICML n D (b :: A --> B :: G) $ single C) pb r
             | (_, sl) => Cut (->R p1) l'
             | (_, sr) => Cut (weak {sG} $ ->R p1) $ swap-head {sG} r'
             | (_, sp1) => Cut sl p1
        \in Cut sp1 sr
      | suc k, suc n, [] X A , single C, []R p1 , ->L (Here e) l r => contradiction
      | suc k, suc n, I , single C, p1, []L (There j) p2 => []L! j $ Cut (Weak-D p1) p2
      | suc k, suc n, --> A B , single C, ->R p1, []L (Here i) p2 => contradiction
      | suc k, suc n, [] X A, single C, []R p1, []L {A'} {X'} (Here i) p2 =>
        \let | (px, pa) => Type.inject[] i
             | p2' => transport2 (\lam a x => SICML n ((a, x) :: D) _ _) pa px p2
             | (_, t1) => Cut (Weak-D ([]R p1)) p2'
        \in CCut p1 t1

    \func CCut {T : \Set} {k n : Nat} {D : Valid T} {I : Type T} {G M R : Ctx T}
               (p1 : SICML k D M (single I)) (p2 : SICML n ((I, M) :: D) G R) : SICML! D G R \elim k, n, I, M, R, p1, p2
      | suc k, , I, M, R,  bump p1, p2 => CCut p1 p2
      | suc k, n, I, M, R,  bump p1, p2 => CCut p1 p2

      | k, suc n, I, M, R, p1, bump p => CCut p1 p
      | k, n, I, M, single C, ::ctx p1 _, p2 => CCut p1 p2
      | 0, n, I, M, single C, p1,  ::ctx p2 _ => CCut p1 p2
      | suc k, n, I, M, single C, p1,  ::ctx p2 _ => CCut p1 p2
      | k, n, I, M, :: C R, p1,  ::ctx p2 r => ::ctx! (CCut p1 p2) (CCut p1 r)
      | k, n, I, M, nil, p1, nilctx => nilctx!
      -- boilerplate end --
      | k, suc n, I, M, single (--> A B), p1, ->R p2 => ->R! $ CCut p1 p2
      | k, suc n, I, M, single ([] X A), p1, []R p2 => []R! $ CCut p1 p2
      | k, suc n, I, M, single C, p1, ->L i l r => ->L! i (CCut p1 l) (CCut p1 r)
      | k, suc n, I, M, single C, p1, []L i p2 => []L! i $ CCut (Weak-D p1) $ swap-head {sD} p2
      | k, n, I, M, single (just _), p1, init i => init! i
      | k, suc n, I, M, single C, p1, reflect (There j) l r => reflect! j (CCut p1 l) (CCut p1 r)
      | k, suc n, I, nil, single C, p1, reflect (Here p) l r =>
        \let | r' => transport (\lam x => SICML n _ (x :: G) _) (pmap (__.1) p) r
             | (_, r'') => CCut p1 r'
             | p1' => flood {sG} G p1
        \in Cut p1' r''
      | k, suc n, I, UM, single C, p1, reflect (Here p) l r =>
        \let | l' => transport (SICML n _ _ __) (pmap (__.2) p) l
             | r' => transport (\lam a => SICML n _ (a :: G) _) (pmap (__.1) p) r
             | l'' => CCut p1 l'
             | r'' => CCut p1 r'
        \in {?}
  }
}



