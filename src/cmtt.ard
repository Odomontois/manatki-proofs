\import Paths
\import Paths.Meta
\import funs
\import list
\import Function

\data Type (T : \Set)
  | just T
  | \infixr 7 --> (Type T) (Type T)
  | [] (List (Type T)) (Type T)

\func Ctx (T : \Set) : \Set => List (Type T)

\func Valid (T : \Set) : \Set => List (\Sigma (Type T) (Ctx T))

\cons \infixr 8 []> {T : \Set} (A B : Type T) : Type T => [] (single A) B

\open List \hiding (at)
\open Elem \hiding (at)

\data ICML {T : \Set} (D : Valid T) (G R : Ctx T) \elim R
  | single A => hyp (Elem A G)
  | single A => ctxhyp {X : Ctx T} (Elem (A, X) D) (ICML D G X)
  | single (-->  A B) => I-> (ICML D (A :: G) (single B))
  | single B => E-> (A : Type T) (ICML D G (single (A --> B))) (ICML D G (single A))
  | single ([] X A) => I[] (ICML D X (single A))
  | single C => E[] (X : Ctx T) (A : Type T) (ICML D G (single ([] X A))) (ICML ((A, X) :: D) G (single C))
  | :: A B => ctx:: (ICML D G (single A)) (ICML D G B)
  | nil => ctxnil \where {
  \func Stat {T : \Set} (t : Type T) : \Set => ICML nil nil (single t)

  \func example-[1] {T : \Set} (C D A : Type T):  Stat $ C []> A --> [] (C :: D :: nil) A =>
    I-> $ E[] (single C) A (hyp @0) $  I[] $ ctxhyp @0 $ hyp @0

  \func example-[2] {T : \Set} (C D A : Type T): Stat $ [] (C :: C :: nil) A --> C []> A =>
    I-> $ E[] (C :: C :: nil) A (hyp @0) $ I[] $ ctxhyp  @0 $ ctx:: (hyp @0) $ hyp @0

  \func example-[3] {T : \Set} (A : Type T): Stat $ A []> A => I[] $ hyp @0

  \func example-[4] {T : \Set} (A B C : Type T): Stat $ A []> B --> A []>  B []>  C --> A []> C =>
    I->      $
    E[] (single A) B (hyp @0) $
    I-> $
    E[] (single A) ([] (single B) C) (hyp @0) $
    I[] $
    E[] (single B) C (ctxhyp @0 (hyp @0)) $
    ctxhyp @0 $ ctxhyp @2 (hyp @0)

  \func example-[5] {T : \Set} (A : Type T) : Stat (([] nil A)  --> A) =>
    I-> $ E[] nil A (hyp @0) (ctxhyp @0 ctxnil)

  \func example-[6] {T : \Set} (A C D : Type T) : Stat $ C []> A --> D []> C []> A =>
    I-> $ E[] (single C) A (hyp @0) $ I[] $ I[] $ ctxhyp @0 (hyp @0)

  \func example-[7] {T : \Set} (A B C D : Type T) : Stat $ C []> (A --> B) --> D []> A --> ([] (C :: D :: nil) B) =>
    I-> $
    I-> $
    E[] (single C) (A --> B) (hyp @1) $
    E[] (single D) A (hyp @0) $
    I[] $
    E-> A (ctxhyp @1 (hyp @0)) (ctxhyp @0 (hyp @1))

  \func example-[8] {T : \Set} (A B C : Type T) : Stat $ A []> (A --> B) --> B []> C --> A []> C =>
    I-> $
    I-> $
    E[] (single A) (A --> B) (hyp @1) $
    E[] (single B) C (hyp @0) $
    I[] $
    ctxhyp @0 $
    E-> A (ctxhyp @1 $ hyp @0) $ hyp @0
}

\data SICML {T : \Set} (D : Valid T) (G R : Ctx T) \elim R
  | single (just _ \as p)  => init (Elem p G)
  | single C => reflect {A : Type T} {X : Ctx T} (Elem (A, X) D) (SICML D G X) (SICML D (A :: G) (single C))
  | single (--> A B) => ->R (SICML D (A :: G) (single B))
  | single C => ->L {A B : Type T} (Elem (A --> B) G) (SICML D G (single A)) (SICML D (B :: G) (single C))
  | single ([] X A) => []R (SICML D X (single A))
  | single C => []L {A : Type T} {X : Ctx T} (Elem ([] X A) G) (SICML ((A, X) :: D) G (single C))
  | nil => nilctx
  | :: A R => ::ctx (SICML D G (single A)) (SICML D G R) \where {
  \func \infix 2 ==> {T : \Set} (GD : \Sigma  (Valid T) (Ctx T)) (C : Type T) : \Set
    | (D, G), C => SICML D G (single C)

  \func swap-G {T : \Set} {D : Valid T} {G R : Ctx T} (G' : Ctx T) {A' B' : Type T}
               (p : SICML D (G' ++ A' :: B' :: G) R) : SICML D (G' ++ B' :: A' :: G) R \elim R, p
    | single (just _ \as p), init i => init $ Elem.swap i
    | single C, reflect {A} e1 px ac => reflect e1 (swap-G _ px) $ swap-G (A :: G') ac
    | single (--> A B), ->R px => ->R $ swap-G (A :: G') px
    | single C, ->L {A} {B} i l r => ->L (Elem.swap i) (swap-G _ l) (swap-G (B :: G') r)
    | single ([] X A), []R p => []R p
    | single C, []L {A} i p => []L (Elem.swap i) (swap-G _ p)
    | nil, nilctx => nilctx
    | :: C R, ::ctx h t => ::ctx (swap-G _ h) (swap-G _ t)

  \func swap-D {T : \Set} {D : Valid T} {G R X Y : Ctx T} (D' : Valid T) {A' B' : Type T}
               (p : SICML (D' ++ (A', X) :: (B', Y) :: D) G R) : SICML (D' ++ (B', Y) :: (A', X) :: D) G R \elim R, p
    | single (just _ \as p), init i => init  i
    | single C, reflect {A} e1 px ac => reflect (Elem.swap e1) (swap-D _ px) (swap-D _ ac)
    | single (--> A B), ->R px => ->R $ swap-D _ px
    | single C, ->L {A} {B} i l r => ->L i (swap-D _ l) (swap-D _ r)
    | single ([] X A), []R p => []R $ swap-D _ p
    | single C, []L {A} {X} i p => []L i $ swap-D ((A, X) :: D') p
    | nil, nilctx => nilctx
    | :: C R, ::ctx h t => ::ctx (swap-D _ h) (swap-D _ t)

  \func exchange-G {T : \Set} {D : Valid T} {G R : Ctx T} (G' G'' : Ctx T) {A B : Type T}
                   (p : SICML D (G' ++ A :: G'' ++ B :: G) R) : SICML D (G' ++ B :: G'' ++ A :: G) R \elim G''
    | nil => swap-G G' p
    | :: C G'' =>
      swap-G G' $
      transport (SICML D __ R) (List.assoc G' (single C) _) $
      exchange-G _ _ $
      transportInv (SICML D __ R) (List.assoc G' (single C) _) $
      swap-G G' p

  \func exchange-D {T : \Set} {D : Valid T} {G R X Y : Ctx T} (D' D'' : Valid T) {A B : Type T}
                   (p : SICML (D' ++ (A, X) :: D'' ++ (B, Y) :: D) G R) : SICML (D' ++ (B, Y) :: D'' ++ (A, X) :: D) G R \elim D''
    | nil => swap-D D' p
    | :: (C, Z) D'' =>
      swap-D D' $
      transport (SICML __ G R) (List.assoc D' (single (C, Z)) _) $
      exchange-D _ _ $
      transportInv (SICML __ G R) (List.assoc D' (single (C, Z)) _) $
      swap-D D' p

  \func move-G {T : \Set} {D : Valid T} {G R : Ctx T} (G' G'' : Ctx T) {A : Type T}
               (p : SICML D (G' ++ A :: (G'' ++ G)) R) : SICML D (G' ++ G'' ++ A :: G) R \elim G''
    | nil => p
    | :: B G'' =>
      transport (SICML D __ R ) (List.assoc G' (single B) _ ) $
      move-G (G' ++ single B) G'' $
      transportInv (SICML D __ R) (List.assoc G' (single B) _ ) $
      swap-G G' p

  \func move-G' {T : \Set} {D : Valid T} {G R : Ctx T} (G' G'' : Ctx T) {A : Type T}
                (p : SICML D (G' ++ G'' ++ A :: G) R) : SICML D (G' ++ A :: (G'' ++ G)) R  \elim G''
    | nil => p
    | :: B G'' =>
      swap-G G' $
      transport (SICML D __ R) (List.assoc G' (single B) _ ) $
      move-G' (G' ++ single B) G'' $
      transportInv (SICML D __ R ) (List.assoc G' (single B) _ ) p

  \func move-D {T : \Set} {D : Valid T} {G R X : Ctx T} (D' D'' : Valid T) {A : Type T}
               (p : SICML (D' ++ (A, X) :: (D'' ++ D)) G R) : SICML (D' ++ D'' ++ (A, X) :: D) G R \elim D''
    | nil => p
    | :: (B, Y) D'' =>
      transport (SICML __ G R ) (List.assoc D' (single (B, Y)) _ ) $
      move-D (D' ++ single (B, Y)) D'' $
      transportInv (SICML __ G R) (List.assoc D' (single (B, Y)) _ ) $
      swap-D D' p

  \func move-D' {T : \Set} {D : Valid T} {G R X : Ctx T} (D' D'' : Valid T) {A : Type T}
                (p : SICML (D' ++ D'' ++ (A, X) :: D) G R) : SICML (D' ++ (A, X) :: (D'' ++ D)) G R \elim D''
    | nil => p
    | :: (B, Y) D'' =>
      swap-D D' $
      transport (SICML __ G R ) (List.assoc D' (single (B, Y)) _ ) $
      move-D' (D' ++ single (B, Y)) D'' $
      transportInv (SICML __ G R) (List.assoc D' (single (B, Y)) _ ) p

  \func swap-GH {T : \Set} {D : Valid T} {G R : Ctx T} {A' B' : Type T} :
    SICML D (A' :: B' :: G) R ->  SICML D (B' :: A' :: G) R => swap-G nil

  \func swap-DH {T : \Set} {D : Valid T} {G R X Y : Ctx T} {A B : Type T} :
    SICML ((A, X) :: (B, Y) :: D) G R ->  SICML ((B, Y) :: (A, X) :: D) G R => swap-D nil

  \func Weak-D {T : \Set} {D : Valid T}  {G Y R : Ctx T} {E : Type T} (p : SICML D G R): SICML ((E, Y) :: D) G R \elim R, p
    | single (just _), init pc => init pc
    | single C, reflect e px ac => reflect (there' e) (Weak-D px) (Weak-D ac)
    | single (--> A B), ->R px => ->R $ Weak-D px
    | single C, ->L i l r => ->L i (Weak-D l) (Weak-D r)
    | single ([] X A), []R p => []R $ Weak-D p
    | single C, []L i p => []L i $ swap-DH $ Weak-D p
    | nil, nilctx => nilctx
    | :: C R, ::ctx h t => ::ctx (Weak-D h) (Weak-D t)

  \func Weak-G {T : \Set} {D : Valid T}  {G R : Ctx T} {E : Type T} (p : SICML D G R): SICML D (E :: G) R \elim R, p
    | single (just _), init pc => init (Elem.there' pc)
    | single C, reflect e px ac => reflect e (Weak-G px) $ swap-GH $ Weak-G ac
    | single (--> A B), ->R px => ->R $ swap-GH $ Weak-G px
    | single C, ->L i l r => ->L (there' i) (Weak-G l) (swap-GH $ Weak-G r)
    | single ([] X A), []R p => []R p
    | single C, []L i p => []L (there' i) $ Weak-G p
    | nil, nilctx => nilctx
    | :: C R, ::ctx h t => ::ctx (Weak-G h) (Weak-G t)

  \func Identity {T : \Set} {D : Valid T} {G R : Ctx T}  : SICML D (R ++ G) R \elim R
    | nil => nilctx
    | :: (just t) R => ::ctx (init @0) $ move-G' nil R Identity
    | :: (--> A B) R => {?} -- ->R $ ->L @1 Identity Identity
    | ::  ([] X A) R => {?}

  -- []L @0 $ []R $ reflect @0 {?} {?}
}


