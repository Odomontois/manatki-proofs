\import Logic
\import Logic
\import Paths
\import monoid
\import order
\import sets
\import Function
\import Order.LinearOrder
\import Order.PartialOrder
\import Order.Lattice

\data List (A : \Type)
  | nil
  | \infixr 6 :: (a : A) (tail : List A) \where {
  \lemma discriminate {A : \Type} {a : A} {t : List A} (p : nil = a :: t) : Empty => coe (discrT o (p @)) () right
    \where {
      \func discrT {A : \Type} (as : List A) : \Prop
        | nil => \Sigma
        | :: _ _ => Empty
    }

  \lemma head-monotone {A : \Set} {la : Poset A} (a b : A) (as : List A) (p : a <= b) : head a as <= head b as \elim as
    | nil => p
    | :: c _ => <=-reflexive c

  \func head {A : \Type} (a : A) (l : List A) : A \elim l
    | nil => a
    | :: b _ => b

  \func tail {A : \Type} (l : List A) : List A \elim l
    | nil => nil
    | :: _ t => t

  \lemma ::-injective {A : \Set} {a a' : A} {t  t' : List A} (p : a :: t = a' :: t') : \Sigma (a = a') (t = t') =>
    ( pmap (head a) p , pmap tail p )
    \where {

    }

  \func length {A : \Type } (l : List A) : Nat
    | nil => Nat.zero
    | :: _ t => suc (length t)

  \func \infixr 5 ++ {A : \Type} (l1 : List A) (l2 : List A) : List A
    | nil, l => l
    | (:: h t), l => h :: (t ++ l)

  \func ++nil {A : \Type} (l : List A): l ++ nil = l
    | nil => idp
    | (:: h t) => pmap (:: h) (++nil t)

  \func assoc {A : \Type} (la lb lc : List A) : (la ++ lb) ++ lc = la ++ (lb ++ lc)  \elim la
    | nil => idp
    | (:: h la') => pmap (:: h) (assoc la' lb lc)

  \instance listMonoid {A : \Set}: Monoid (List A)
    | empty => nil
    | |+| => List.++
    | left_empty a => idp
    | right_empty => List.++nil
    | assoc  => List.assoc

  \open TotalOrder (totality)
  \open || (byLeft, byRight)
  \open JoinSemilattice (join-comm)

  \func minimum {A : \Set} {sa : JoinSemilattice A} (a : A) (as : List A) : A \elim as
    | nil => a
    | :: a' tail =>  minimum (join a a') tail
    \where {
      \lemma unordered {A : \Set} {to : JoinSemilattice A} (a a' : A) (as : List A) :
        minimum a (a' :: as) = minimum a' (a :: as) => pmap (\lam x => minimum x as) (join-comm _ _)
    }
}






  \data Elem {A : \Type} (e : A) (l : List A)
    | Here (t : List A) (eq : e :: t = l)
    | There (h : A) (t : List A) (elem : Elem e t) (eq : h :: t = l) \where {
    \func here!=there {A B : \Type} (e h : A) (l t1 t2 : List A) (el : Elem e t2)
                      (eq1 : e :: t1 = l) (eq2 : h :: t2 = l)
                      (p : Here t1 eq1 = There h t2 el eq2 )  : B =>
      coe (\lam i => \case p @ i \with { Here _ _ => \Sigma | There _ _ _ _  => B }) () right

    \func tail-elem {A : \Type} (e h : A) (l : List A) (elem : Elem e l) : Elem e (h :: l) => There h l elem idp
  }


