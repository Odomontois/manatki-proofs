\import Function
\import Paths
\import list
\import monoid
\open Endo

\class Foldable (F : \Set -> \Set  (\suc \lp) )  {
  \field foldMap {A : \Set} {B : Monoid} (f : A -> B) (fa : F A) : B
}

\instance foldableList : Foldable List
  | foldMap  => foldMapImpl
  \where {
    \func foldMapImpl {A : \Set} {B : Monoid} (f : A -> B) (fa : List A) : B \elim fa
      | nil => B.empty
      | :: h t => f h |+| foldMapImpl f t
  }

\func foldr {F : \Set -> \Set} {ff : Foldable F} {A B : \Set} (f : A -> B -> B) (z : B) (fa : F A) : B =>
  runEndo (ff.foldMap {_} {endoMonoid} (\lam x => endo (f x)) fa) z

\record MonoList (A B : \Set){
  | a=b : A = B
  | list : List A
}

\func monoList (A B : \Set) : \Set => MonoList A B

\instance monoListFoldabe {A : \Set} : Foldable (monoList A)
  | foldMap {B} f (fb : MonoList A B) => foldMap f (transport List fb.a=b fb.list )