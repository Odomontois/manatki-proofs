\import monad
\import Paths
\import funs
\import sets
\import monoid
\import Function

\func identityMonad : Monad (id) \cowith
  | pure x => x
  | flatMap fa f => f fa
  | left_unit _ _ => idp
  | right_unit _ => idp
  | assocmonad _ _ _ => idp

\func stateMonad (S : \Set) : Monad (\lam A => S -> \Sigma S A) \cowith
  | pure x s => (s, x)
  | flatMap fa f s => \let sa => fa s \in f sa.2 sa.1
  | left_unit _ _ => idp
  | right_unit _ => idp
  | assocmonad _ _ _ => idp

\func  readerMonad (R : \Set ) : Monad (\lam A => R -> A) \cowith
  | pure x a => x
  | flatMap fa f r => f (fa r) r
  | left_unit _ _ => idp
  | right_unit _ => idp
  | assocmonad _ _ _ => idp

\open Semigroup (|+|)

\func writerMonad {W : \Set} {wmon : Monoid W} : Monad (\lam A => \Sigma W A) \cowith
  | pure {_} x => (empty, x)
  | flatMap {_} {_} fa f => \let fb => f (fa.2) \in (fa.1 |+| fb.1, fb.2)
  | left_unit {_} {B} a f => \let fb => f a \in pairExt (left_empty fb.1) idp
  | right_unit {A} fa => pairExt (right_empty fa.1) idp
  | assocmonad {_} {_} {C} fa f g => \let | fb => f fa.2 | fc => g fb.2
                                     \in pairExt (inv (assoc fa.1 fb.1 fc.1)) idp

\func readerTMonad {R : \Set} {M : \Set -> \Set} {XM : Monad M} : Monad (\lam A => R -> M A ) \cowith
  | pure a => const (pure a)
  | flatMap fa f r => XM.flatMap (fa r) (\lam a => f a r)
  | left_unit {_} {B} a f => functExt (\lam r => left_unit a (\lam a => f a r))
  | right_unit {A} fa => functExt  (\lam r => right_unit (fa r))
  | assocmonad {A} {B} {C} fa f g => functExt (\lam r => assocmonad (fa r) (\lam a => f a r) (\lam b => g b r))

\func stateTMonad {S : \Set} (M : \Set -> \Set ) {XM : Monad M} : Monad (\lam A => S -> M (\Sigma S A)) \cowith
  | pure a s => pure (s, a)
  | flatMap fa f s => XM.flatMap (fa s) (\lam sa => f sa.2 sa.1)
  | left_unit a f => functExt (\lam s => left_unit (s, a) (\lam sa => f sa.2 sa.1))
  | right_unit fa => functExt (\lam s => right_unit (fa s) )
  | assocmonad fa f g => functExt (\lam s => assocmonad (fa s) (\lam sa => f sa.2 sa.1) (\lam sb => g sb.2 sb.1) )

\data WriterT (X W : \Set) | WriterT

\func  writerTMonad {W : \Set} (M : \Set -> \Set) {XM : Monad M} {wmon : Monoid W} : Monad (\lam A => M (\Sigma W A)) \cowith
  | pure a => pure (empty, a)
  | flatMap fa => fmImpl M fa
  | left_unit {A} {B} a f =>
    \let | e1 => left_unit (empty, a) (writMonFM M f)
         | e2 =>  path(\lam i => flatMap (f a) (\lam x => pure (left_empty  x.1 @ i, x.2)))
    \in  e1 *> e2 *> right_unit (f a)
  | right_unit {A} fa => path (\lam i => flatMap fa (\lam wa => ruLemma W M wa @ i)) *> XM.right_unit fa
  | assocmonad fa f g => assocImpl M fa f g \where {
  \lemma ruLemma  (W : \Set) (X : \Set -> \Set ) {XM : Monad X} {wmon : Monoid W} {A : \Set } (wa : \Sigma W A) :
    writMonFM X (\lam a => XM.pure (empty, a)) wa = XM.pure wa \elim wa
    | (w, a) => left_unit (_) (_) *> path (\lam i => pure (right_empty w @ i, a))

  \func fmImpl {A B W : \Set} (M : \Set -> \Set) {mm : Monad M} {mon : Monoid W} (fa : M (\Sigma W A)) (f : A -> M (\Sigma W B)) : M (\Sigma W B) =>
    mm.flatMap fa (writMonFM M f)

  \func writMonFM
    {W : \Set} {A B : \Set} (M : \Set  -> \Set)
    {XM : Monad M} {wmon : Monoid W} (f : A -> M (\Sigma W B) ) (wa : \Sigma W A):  M (\Sigma  W B) \elim wa
    | (w, a) => map  (\lam (wb : \Sigma W B) => (w |+| wb.1, wb.2)) (f a)

  \lemma assocImpl {A B C W : \Set} (M : \Set -> \Set) {mm : Monad M} {wmon : Monoid W} (fa : M (\Sigma W A)) (f : A -> M (\Sigma W B) ) (g : B -> M (\Sigma W C) ) :
    fmImpl M fa (\lam a => fmImpl M (f a) g) = fmImpl M (fmImpl M fa f) g =>
    \let | tail (wb : \Sigma W B) => mm.flatMap  (g wb.2) (\lam wc => mm.pure (wb.1 |+| wc.1 , wc.2))
         | l2=l1 (wa : \Sigma W A) => mm.assocmonad (f wa.2) tail (\lam wc => mm.pure (wa.1 |+| wc.1, wc.2))
         | r2=r1 (wa : \Sigma W A)  => mm.assocmonad (f wa.2) (\lam wb => mm.pure (wa.1 |+| wb.1, wb.2)) tail
         | l2i'=l2i (w : W) (wb : \Sigma W B) => mm.composition (g wb.2) (\lam wc => (wb.1 |+| wc.1 , wc.2)) (\lam wc => (w |+| wc.1, wc.2))
         | r2i=r2i' (w : W) (wb : \Sigma W B) => mm.left_unit (w |+| wb.1, wb.2) (\lam wb => mm.flatMap  (g wb.2) (\lam wc => mm.pure (wb.1 |+| wc.1 , wc.2)))
         | l2i=r2i (w : W) (wb : \Sigma W B) =>
           (inv (l2i'=l2i w wb)) *> path (\lam i => mm.flatMap (g wb.2) (\lam wc => mm.pure ((inv (wmon.assoc w wb.1 wc.1)) @ i , wc.2)  )  ) *> (inv (r2i=r2i' w wb))
         | internal (wa : \Sigma W A) => inv (l2=l1 wa) *> path (\lam i => mm.flatMap (f wa.2) (\lam wb => (l2i=r2i wa.1 wb) @ i)) *> r2=r1 wa
    \in path(\lam i => mm.flatMap fa (\lam wa => internal wa @ i)) *> mm.assocmonad fa (_) tail
}


\import Data.List