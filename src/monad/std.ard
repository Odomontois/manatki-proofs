\import monad
\import Paths
\import funs
\import sets
\import monoid

\func identityMonad : Monad (id) \cowith
  | pure x => x
  | flatMap fa f => f fa
  | left_unit _ _ => idp
  | right_unit _ => idp
  | associativity _ _ _ => idp

\func stateMonad (S : \Set) : Monad (\lam A => S -> \Sigma S A) \cowith
  | pure x s => (s, x)
  | flatMap fa f s => \let sa => fa s \in f sa.2 sa.1
  | left_unit _ _ => idp
  | right_unit _ => idp
  | associativity _ _ _ => idp

\func  readerMonad (R : \Set ) : Monad (\lam A => R -> A) \cowith
  | pure x a => x
  | flatMap fa f r => f (fa r) r
  | left_unit _ _ => idp
  | right_unit _ => idp
  | associativity _ _ _ => idp

\open Semigroup (|+|)

\func writerMonad {W : \Set} {wmon : Monoid W} : Monad (\lam A => \Sigma W A) \cowith
  | pure {_} x => (wmon.empty, x)
  | flatMap {_} {_} fa f => \let fb => f (fa.2) \in (fa.1 |+| fb.1, fb.2)
  | left_unit {_} {B} a f => \let fb => f a \in pairExt (wmon.left_unit fb.1) idp
  | right_unit {A} fa => pairExt (wmon.right_unit fa.1) idp
  | associativity {_} {_} {C} fa f g => \let | fb => f fa.2 | fc => g fb.2
                                        \in pairExt (inv (wmon.associativity fa.1 fb.1 fc.1)) idp

\func readerTMonad {R : \Set} {X : \Set -> \Set} {XM : Monad X} : Monad (\lam A => R -> XM.F A ) \cowith
  | pure a => const (XM.pure a)
  | flatMap fa f r => XM.flatMap (fa r) (\lam a => f a r)
  | left_unit {_} {B} a f => functExt (\lam r => XM.left_unit a (\lam a => f a r))
  | right_unit {A} fa => functExt  (\lam r => XM.right_unit (fa r))
  | associativity {A} {B} {C} fa f g => functExt (\lam r => XM.associativity (fa r) (\lam a => f a r) (\lam b => g b r))

\func stateTMonad {S : \Set} {X : \Set -> \Set }{XM : Monad X} : Monad (\lam A => S -> XM.F (\Sigma S A)) \cowith
  | pure a s => XM.pure (s, a)
  | flatMap fa f s => XM.flatMap (fa s) (\lam sa => f sa.2 sa.1)
  | left_unit a f => functExt (\lam s => XM.left_unit (s, a) (\lam sa => f sa.2 sa.1))
  | right_unit fa => functExt (\lam s => XM.right_unit (fa s) )
  | associativity fa f g => functExt (\lam s => XM.associativity (fa s) (\lam sa => f sa.2 sa.1) (\lam sb => g sb.2 sb.1) )

\func writMonFM' {W A B : \Set} {X : \Set -> \Set} (XM : Monad X) {wmon : Monoid W} (f : A -> XM.F (\Sigma W B) ) (wa : \Sigma W A) =>
  XM.map  (\lam (wb : \Sigma W B) => (wa.1 |+| wb.1, wb.2)) (f wa.2)

\data WriterT (X W : \Set) | WriterT

\func  writerTMonad {X W : \Set} (X : \Set -> \Set) {XM : Monad X} {wmon : Monoid W} : Monad (\lam A => X (\Sigma W A)) \cowith
  | pure a => XM.pure (wmon.empty, a)
  | flatMap fa f => XM.flatMap fa (writMonFM' XM f)
  | left_unit {A} {B} a f =>
    \let | init => (wmon.empty, a)
         | e1 => XM.left_unit init (writMonFM' XM f)
         | e2' => functExt {_} {_}
                           {\lam (wb : \Sigma W B) => XM.pure (wmon.empty |+| wb.1, wb.2)}  {XM.pure}
                           (\lam (wb : \Sigma W B) => pmap (\lam w => XM.pure (w, wb.2)) (wmon.left_unit wb.1))
         | e2 => pmap (\lam ff => XM.flatMap (f a) ff) e2'
         | e3 => XM.right_unit (f a)
    \in  e1 *> e2 *> e3
  | right_unit fa => {?}
  | associativity fa f g => {?} \where {

}
