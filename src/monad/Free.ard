\import Equiv
\import Function
\import Paths

\record TypeConstr (F : \Type  -> \Type  (\suc \lp) (\suc \lh))

\class Functor \extends TypeConstr {
  | map : \Pi {A B : \Type} ->  (A -> B)  -> F A -> F B
  | identity : \Pi { A : \Type } (fa : F A) -> map id fa  = fa
  | composition : \Pi { A B C : \Type } (fa : F A) (f : A -> B) (g : B -> C) -> map (g o f) fa  = (map g o map f) fa
}

\record BaseMonad \extends TypeConstr {
  | pure : \Pi {A : \Type } -> A -> F A
  | flatMap : \Pi {A B : \Type } -> F (A) -> (A -> F B) -> F B
  | left_unit : \Pi { A B : \Type } (a : A) (f : A -> F B) -> flatMap (pure a) f = f a
  | right_unit : \Pi { A : \Type } (fa : F A) -> flatMap fa pure = fa
  | associativity : \Pi { A B C : \Type} (fa : F A) (f : A -> F B) (g : B -> F C) ->
      flatMap fa (\lam x => flatMap (f x) g) = flatMap ( flatMap fa f ) g
}

\class Monad \extends BaseMonad , Functor {
  | map f fa  => flatMap fa (\lam x => pure (f x))
  | identity => right_unit
  | composition {_} {_} {C}  fa f g =>
    \let | gp x => pure (g x)
         | lu_extended => funExt (\lam _ => F C) gp (\lam b => flatMap (pure b) gp) (\lam b => inv ( left_unit b gp))
    \in pmap (\lam u => flatMap fa (u o f)) lu_extended *>  associativity fa (pure o f) gp
}

\record Trans {F : \Set -> \Set} {G : \Set -> \Set} (t : \Pi {A : \Set} (F A) -> G A)

\record  NatTrans \extends Trans   {
  \field ffunc : Functor F
  \field gfunc : Functor G
  \property naturality {A B : \Type} (f : A -> B) (fa : F A) : (gfunc.map f o t) fa  = (t o ffunc.map f) fa
}

\record  MonadTransBase \extends Trans{
  \field fmon : Monad F
  \field gmon : Monad G
  \property purity {A : \Type} (a : A) : gmon.pure a = (t o fmon.pure) a
  \property flatness {A B : \Type} (fa : F A) (f : A -> F B) : gmon.flatMap (t fa) (t o f) = t (fmon.flatMap fa f)
}

\record MonadTrans \extends NatTrans, MonadTransBase{
  | ffunc => fmon
  | gfunc => gmon
  | naturality f fa => path (\lam i => gmon.flatMap (t fa) (\lam a => purity (f a) @ i  )) *> flatness fa (fmon.pure o f)
}


\data Freer  (F : \Type -> \Type ) (A : \Type )
  | Purer A
  | FlatMap  {B : \Type} (F B) (B -> Freer F A )

\instance freerMonad  {F : \Type  -> \Type }:  Monad (Freer  F )
  | pure => Purer \lp {F}
  | flatMap => flatMapImpl {F}
  | left_unit a f => idp
  | right_unit  => rightUnitImpl {F}
  | associativity => assocImpl {F}
  \where {
    \func flatMapImpl {F : \Type -> \Type } {A B : \Type} (fa : Freer F A) (f : A -> Freer F B) : Freer F B  \elim fa
      | Purer a => f a
      | FlatMap {C} fc k => FlatMap fc (\lam c => flatMapImpl (k c) f)

    \func rightUnitImpl {F : \Type -> \Type} {A : \Type} (fa : Freer F A): flatMapImpl fa Purer = fa \elim fa
      | Purer a => idp
      | FlatMap {B} fb f => path (\lam i => FlatMap fb (\lam b => rightUnitImpl (f b) @ i  ) )

    \func assocImpl {F : \Type -> \Type} {A B C : \Type} (fa : Freer F A) (f : A -> Freer F B) (g : B -> Freer F C) :
      flatMapImpl fa (\lam a => flatMapImpl (f a) g) = flatMapImpl (flatMapImpl fa f) g \elim fa
      | Purer fa => idp
      | FlatMap {B} fb h => path (\lam i => FlatMap fb (\lam b => assocImpl (h b)  f g @ i))
  }


--\func Free (F : \Type -> \Type) (A : \Type) => \Pi (G : \Type -> \Type ) -> QEquiv (NatTrans F G) (MonadMorph Fk G)