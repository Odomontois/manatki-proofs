\import Order.LinearOrder
\import Order.StrictOrder
\import Order.PartialOrder
\import Order.Lattice
\import Set
\import Logic
\import Paths
\import HLevel

\data \infixl 2 Xor (A B : \Prop)
  | IsLeft A (Not B)
  | IsRight B (Not A)
  \where {
    \use \level xorIsProp {A B : \Prop} (x1 x2 : Xor A B) : x1 = x2
      | IsLeft  a1 nb1, IsLeft a2 nb2 => pmap2 IsLeft (Path.inProp a1 a2) (Path.inProp nb1 nb2)
      | IsRight b1 na1, IsRight b2 na2 => pmap2 IsRight (Path.inProp b1 b2) (Path.inProp na1 na2)
      | IsLeft  a nb, IsRight b na => absurd (na a)
      | IsRight b na, IsLeft a nb => absurd (na a)
  }

\open StrictPoset
\open LinearOrder.Dec

\func xcompare {A : \Set} {to : LinearOrder.Dec A} (a b : A) : (a = b) Xor a < {to} b Xor a > b =>
  \case trichotomy a b \with {
    | byLeft a=b => IsLeft(IsLeft a=b (\lam a<b => distinct= a<b a=b)) (\lam a>b => distinct= a>b (inv a=b))
    | byRight (byLeft a<b) => IsLeft ( IsRight a<b (\lam a=b => distinct= a<b a=b)) (\lam a>b => distinct< a<b a>b)
    | byRight (byRight a>b) => IsRight a>b (\lam a<=b => \case a<=b \with {
      | IsLeft a=b a!<b => distinct= a>b (inv a=b)
      | IsRight a<b a!=b => distinct< a<b a>b
    })
  } \where {
  \lemma distinct= {A : \Set} {to : LinearOrder.Dec A} {a b : A} (lt : a < b) (e : a = b) : Empty =>
    <-irreflexive b (coe  (\lam i => e @ i < b) lt right)

  \lemma distinct< {A : \Set} {to : LinearOrder.Dec A} {a b : A} (lt : a < b) (gt : a > b) : Empty =>
    <-irreflexive a (<-transitive a b a lt gt)
}

\open LinearOrder.Dec (=>TotalOrder)

\func max {A : \Set} {xo : LinearOrder.Dec A} (a a' : A) : A => meet {=>TotalOrder} a a'

\func min {A : \Set} {xo : LinearOrder.Dec A} (a a' : A) : A => join {=>TotalOrder} a a'

\func \infixl 4 ~*> {A : \Set} {po : Preorder A} {a b c : A} (ie1 : a <= b) (ie2 : b <= c) : a <= c => <=-transitive a b c  ie1 ie2
