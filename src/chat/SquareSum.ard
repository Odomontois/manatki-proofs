\import Logic.Meta
\import Algebra.Monoid
\import Algebra.Pointed
\import Algebra.Ordered
\import Algebra.Semiring
\import Arith.Nat
\import Arith.Rat
\import Order.StrictOrder
\import Logic
\import Logic.Meta
\import Order.LinearOrder
\open LinearOrder
\import Paths

\lemma square_sum_zero_nat (a b : Nat) (p : a * a + b * b = 0): \Sigma (a = 0) (b = 0)
  | 0, 0, p => (idp, idp)
  | suc a, 0, p => contradiction

\lemma square_sum_zero_rat (a b : Rat) (p : a * a + b * b = zro): \Sigma (a = zro) (b = zro) => squareSum0->0 a b p

\lemma square>=0 {A : LinearlyOrderedSemiring} (a : A): Not (a * a < zro) =>
  \lam p => \let q : a * a < a * zro => transport (_ < __) (inv (zro_*-right a)) p
            \in \case <_*-cancel-left a a zro q \with {
      | byLeft (a<0, a>0) => <-irreflexive (<-transitive a<0 a>0)
      | byRight (a<0, a>0) => <-irreflexive (<-transitive a<0 a>0)
    }

\lemma negSquare>0 {A : LinearlyOrderedSemiring} (a : A) (a<0 : a < 0): a * a > 0 =>
  transport (a * a > __) (zro_*-left a) (<_*_negative-left a<0 a<0)

\lemma posSquare>0 {A : LinearlyOrderedSemiring} (a : A) (a>0 : a > 0): a * a > 0 =>
  transport (a * a > __) (zro_*-left a) (<_*_positive-left a>0 a>0)

\lemma doubleNeg {A : LinearlyOrderedSemiring} (a : A) (a+a<0 : a + a < zro): a < zro =>
  \case <-comparison _ a _ a+a<0 \with {
    | byRight a<0 => a<0
    | byLeft a+a<a => <_+-cancel-left a a zro (transport (_ < __ ) (inv zro-right) a+a<a)
  }

\lemma pos+notNeg {A : LinearlyOrderedSemiring} {a b : A} (a>0 : a > zro) (b>=0 : Not (b < zro)): a + b > 0 =>
  \case <-comparison _ b _ a>0 \with {
    | byLeft b>0 => transport (__ < _) zro-left (<_+-right zro b zro b>0 `<-transitive` <_+-left zro a b a>0)
    | byRight b<a => \case <-comparison _ zro _  (<_+-left _ _ b b<a) \with {
      | byLeft b+b<0 => absurd (b>=0 (doubleNeg b b+b<0))
      | byRight a+b>0 => a+b>0
    }
  }

\open LinearOrder.Dec

\lemma squareSum0->0 {A : LinearlyOrderedSemiring} (a b : A) (a*a+b*b=0 : a * a + b * b = zro): \Sigma (a = zro) (b = zro) =>
  \let | bad-idea {P : \Prop} (c : P -> a * a + b * b > zro) : Not P => \lam p => A.<-irreflexive (transport (__ > zro) a*a+b*b=0 (c p))
       | bad-A {P : \Prop} (c : P -> a * a > zro) : Not P =>  bad-idea (\lam p => pos+notNeg {A} (c p) (square>=0 b) )
       | bad-B {P : \Prop} (c : P -> b * b > zro) : Not P =>
         bad-idea (\lam p => transport (__ > _) A.+-comm (pos+notNeg {A} (c p) (square>=0 a)) )
       | a=0 => A.<-connectedness (bad-A (negSquare>0 a)) (bad-A (posSquare>0 a))
       | b=0 => A.<-connectedness (bad-B (negSquare>0 b)) (bad-B (posSquare>0 b))
  \in (a=0, b=0)

