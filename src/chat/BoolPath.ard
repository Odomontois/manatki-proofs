\import Data.Bool
\import Equiv (QEquiv)
\import Equiv.Univalence
\import HLevel
\import Paths

\func not-involutive (b : Bool) : not (not b) = b
  | true => idp
  | false => {?}

\func boolInv : Bool = Bool => QEquiv-to-= (\new QEquiv not not not-involutive not-involutive)

\func omg : Path (@ boolInv) true false => path (coe (@ boolInv) true)

\func T (b : Nat) : \Sigma (t : \hType) (isSet t)
  | zero => (Bool, \lam x y p => Path.inProp p)
  | suc n => \let (s, l) => T n \in (s = {\hType} Bool, {?})