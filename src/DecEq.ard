\import Data.Bool
\import Equiv
\import Equiv.Univalence
\import Logic
\import Paths
\import Set
\import Function
\import Arith.Nat
\import Set.Fin

\instance decSetBool : DecSet.Impl Bool
  | decideEq => impl
  \where {
    \lemma impl (a b : Bool) : Dec (a = b) \elim a, b
      | true, true => yes idp
      | false, false => yes idp
      | true, false => no true/=false
      | false, true => no (true/=false o inv)
  }

\instance decEqUnit : DecSet.Impl (\Sigma)
  | decideEq a b => yes (Path.inProp a b)

\func decEqSigma {A : DecSet} (BD : \Pi (a : A) -> DecSet) : DecSet.Impl (\Sigma (a : A) (BaseSet.E {BD a})) \cowith
  | decideEq s1 s2 =>
    \let | B (a : A) : \Set => BaseSet.E {BD a}
         | se : QEquiv => sigmaEquiv B s1 s2
    \in \case decideEq s1.1 s2.1 \with {
      | no n => no (\lam e => n (pmap (\lam s => s.1) e))
      | yes e1 => \case  transport B e1 s1.2 `decideEq` {BD s2.1} s2.2 \with {
        | yes e2 => yes (se.ret (e1, e2))
        | no n => no (\lam e => n (
          \let eqs => se.f e
          \in transport (\lam p => transport B p s1.2 = s2.2)
                        (Path.inProp {s1.1 = s2.1} eqs.1 e1) eqs.2))
      }
    }

\instance decEqNat : DecSet.Impl Nat
  | decideEq => impl \where {
  \lemma suc!=0 {n : Nat} (p : suc n = 0) : Empty => suc/=0 p

  \lemma impl (a b : Nat) : Dec (a = b) \elim a, b
    | 0, 0 => yes idp
    | 0, suc _ => no (suc!=0 o inv)
    | suc _, 0 => no suc!=0
    | suc n, suc n1 => decTrans (propmap suc) (pmap pred) (impl n n1)
}

\lemma propmap {A B : \Set} (f : A -> B) {a a' : A} :  a = a' -> f a = f a' => pmap f

\lemma decTrans {E D : \Prop} (f : E -> D) (g : D -> E) : Dec E -> Dec D =>
  transport Dec (QEquiv-to-= (\new QEquiv f g (\lam _ => Path.inProp _ _) (\lam _ => Path.inProp _ _)))

\instance decSetFin {n : Nat} : DecSet.Impl (Fin n)
  | decideEq => impl \where {
  \lemma impl {n : Nat} (a b : Fin n) : Dec (a = b) \elim n, a, b
    | suc _, fzero, fzero => yes idp
    | suc _, fzero, fsuc _ => no fzero/=fsuc
    | suc _, fsuc _, fzero => no (fzero/=fsuc o inv)
    | suc _, fsuc f, fsuc g => decTrans (propmap fsuc) (fsuc-isInj f g) (impl f g)
}

