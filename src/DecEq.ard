\import Data.Bool
\import Equiv
\import Paths
\import Set
\import Function

\class DecEq (A : \Set)
  | \infix 2 == (a b : A) : Dec (a = b)

\instance decEqBool : DecEq Bool
  | == => impl
  \where {
    \func impl (a b : Bool) : Dec (a = b) \elim  a, b
      | true, true => yes idp
      | false, false => yes idp
      | true, false => no true/=false
      | false, true => no (true/=false o inv)
  }

\instance decEqUnit : DecEq (\Sigma)
  | == a b => yes (Path.inProp a b)

\instance decEqSigma {A : DecEq} (B : A -> \Set) (BD : \Pi (a : A) -> DecEq (B a)) : DecEq (\Sigma (a : A) (B a))
  | == s1 s2 => \case (s1.1 == s2.1) \with {
    | no n => no (\lam e => n (pmap (\lam s => s.1) e))
    | yes e1 => decEq2 s1.1 s2.1 B BD e1 s1.2 s2.2
  } \where {
  \lemma decEq2 {A : \Set} (a1 a2 : A) (B : A -> \Set) (BD : \Pi (a : A) -> DecEq (B a)) (e : a1 = a2) (b1 : B a1)
    : \Pi (b2 : B a2) ->  Dec ((a1, b1) = {\Sigma (a : A) (B a)} (a2, b2)) \elim e
    | idp => decEq2a a1 B BD b1

  \lemma decEq2a {A : \Set} (a : A) (B : A -> \Set) (BD : \Pi (a : A) -> DecEq (B a))(b1 b2 : B a)
    : Dec ((a, b1) = {\Sigma (a : A) (B a)} (a, b2)) =>
    \case == {BD a} b1 b2 \with{
      | no n => no (\lam e => n (sigmaSecond a B b1 b2 e))
      | yes e => yes (path (\lam i => (a, e @ i)))
    }

  \lemma sigmaSecond {A : \Set} (a : A) (B : A -> \Set) (b1 b2 : B a) (p : (a, b1) = {\Sigma  (a' : A) (B a')} (a , b2)): b1 = b2 =>
    \case (Equiv.f {sigmaEquiv B _ _} p) \with {
      | (p', r) => transport (\lam p => transport B p b1 = b2) (Path.inProp {a = a} p' idp) r
    }
}

