\import Data.Bool
\import Paths
\import Set
\import Function

\class DecEq (A : \Set)
  | \infix 2 == (a b : A) : Dec (a = b)

\instance decEqBool : DecEq Bool
  | == => impl
  \where {
    \func impl (a b : Bool) : Dec (a = b) \elim  a, b
      | true, true => yes idp
      | false, false => yes idp
      | true, false => no true/=false
      | false, true => no (true/=false o inv)
  }

\instance decEqUnit : DecEq (\Sigma)
  | == a b => yes (Path.inProp a b)

\instance decEqSigma {A : DecEq} (B : A -> \Set) (BD : \Pi (a : A) -> DecEq (B a)) : DecEq (\Sigma (a : A) (B a))
  | == s1 s2 => \case (s1.1 == s2.1) \with {
    | no n => no (\lam e => n (pmap (\lam s => s.1) e))
    | yes e1 => decEq2 s1.1 s2.1 B BD e1 s1.2 s2.2
  } \where {
  \func decEq2 {A : \Set} (a1 a2 : A) (B : A -> \Set) (BD : \Pi (a : A) -> DecEq (B a)) (e : a1 = a2) (b1 : B a1)
    : \Pi (b2 : B a2) ->  Dec ((a1, b1) = {\Sigma (a : A) (B a)} (a2, b2)) =>
    Jl (\lam a' eq => \Pi (b' : B a') -> Dec ((a1, b1) = {\Sigma (a : A) (B a)} (a', b'))) (decEq2a a1 B BD b1) e

  \func decEq2a {A : \Set} (a : A) (B : A -> \Set) (BD : \Pi (a : A) -> DecEq (B a))(b1 b2 : B a)
    : Dec ((a, b1) = {\Sigma (a : A) (B a)} (a, b2)) =>
    \case == {BD a} b1 b2 \with{
      | no n => no (\lam e => {?})
      | yes e => {?}
    }

  \func sigmaSecond {A : \Set} (a : A) (B : A -> \Set) (b1 b2 : B a) (p : (a, b1) = {\Sigma  (a' : A) (B a')} (a , b2)): b1 = b2 =>
    \let | T => \Sigma (a' : A) (B a')
         | s1 : T => (a, b1)
         | s2 : T => (a, b2)
         | q  : s1 = {T} s2 => p
         | p' : a = a => pmap (\lam t => t.1) q
         | r : transport B p' b1 = b2 => {?}
         | p'=idp : p' = idp => Path.inProp {a = a} p' idp
    \in transport (\lam p => transport B p b1 = b2) p'=idp r

  \func sigmaEq2 {A : \Set} (B : A -> \Set) {w1 w2 : \Sigma (a : A) (B a)} (e : w1 = w2)
    : \Sigma (p : w1.1 = w2.1) (transport B p w1.2 = w2.2) \elim e
    | idp => (idp, idp)

  \func sigmaEq {A : \Set} (B : A -> \Set) {w1 w2 : \Sigma (a : A) (B a)} (e : w1 = w2)
    : \Sigma (p : w1.1 = w2.1) (transport B p w1.2 = w2.2) =>
    Jl {\Sigma (a : A) (B a)} {w1} (\lam w' e => \Sigma (p : w1.1 = w'.1) (transport B p w1.2 = w'.2)) ((idp, idp)) {w2} e
}

