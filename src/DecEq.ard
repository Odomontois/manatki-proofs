\import Arith.Nat
\import Data.Bool
\import Data.Fin
\import Equiv
\import Equiv.Univalence
\import Function
\import Logic
\import Logic.Meta
\import Paths
\import Set

\instance decSetBool : DecSet Bool
  | decideEq => impl
  \where {
    \lemma impl (a b : Bool) : Dec (a = b) \elim a, b
      | true, true => yes idp
      | false, false => yes idp
      | true, false => no true/=false
      | false, true => no (true/=false o inv)
  }

\instance decEqUnit : DecSet (\Sigma)
  | decideEq a b => yes (Path.inProp a b)

\instance decEqSigma {A : DecSet} (BD : \Pi (a : A) -> DecSet) : DecSet (\Sigma (a : A) (BaseSet.E {BD a}))
  | decideEq s1 s2 =>
    \let | B (a : A) : \Set => BaseSet.E {BD a}
         | se : QEquiv => sigmaEquiv B s1 s2
    \in \case decideEq s1.1 s2.1 \with {
      | no n => no (\lam e => n (pmap (\lam s => s.1) e))
      | yes e1 => \case  transport B e1 s1.2 `decideEq` {BD s2.1} s2.2 \with {
        | yes e2 => yes (se.ret (e1, e2))
        | no n => no (\lam e => n (
          \let eqs => se.f e
          \in transport (\lam p => transport B p s1.2 = s2.2)
              (Path.inProp {s1.1 = s2.1} eqs.1 e1) eqs.2))
      }
    }

\instance decEqNat : DecSet Nat
  | decideEq => impl \where {
  \lemma suc!=0 {n : Nat} (p : suc n = 0) : Empty => suc/=0 p

  \lemma impl (a b : Nat) : Dec (a = b) \elim a, b
    | 0, 0 => yes idp
    | 0, suc _ => no (suc!=0 o inv)
    | suc _, 0 => no suc!=0
    | suc n, suc n1 => decTransEq (pmap suc) (pmap pred) (impl n n1)
}

\lemma decTrans {E D : \Prop} (f : E -> D) (g : D -> E) : Dec E -> Dec D =>
  transport Dec (QEquiv-to-= (\new QEquiv f g (\lam _ => Path.inProp _ _) (\lam _ => Path.inProp _ _)))

\lemma decTransEq  {A B : \Set} {a a' : A} {b b' : B} (f : a = a' -> b = b') (g : b = b' -> a = a') : Dec (a = a') -> Dec (b = b') =>
  decTrans f g

\instance decSetFin {n : Nat} : DecSet (Fin n)
  | decideEq => impl \where {
  \lemma suc-inj {n : Nat} {a b : Fin n} (p : fsuc a = fsuc b) : a = b =>
    \let fpred (t : Fin (suc n)): Fin n =>
      \case t \with {
        | 0 => a
        | fsuc x => x
      }
    \in pmap fpred p

  \lemma impl {n : Nat} (a b : Fin n) : Dec (a = b) \elim n, a, b
    | suc _, 0, 0 => yes idp
    | suc _, 0, suc _ => no contradiction
    | suc _, suc _, zero => no contradiction
    | suc n, suc f, suc g => decTransEq (pmap fsuc) suc-inj (impl f g)
}

