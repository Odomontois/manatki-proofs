\import Paths

\data day
  | monday
  | tuesday
  | wednesday
  | thursday
  | friday
  | saturday
  | sunday

\func next_weekday (d : day) : day
  | monday    => tuesday
  | tuesday   => wednesday
  | wednesday => thursday
  | thursday  => friday
  | friday    => monday
  | saturday  => monday
  | sunday    => monday

\lemma test_next_weekday : (next_weekday (next_weekday saturday)) = tuesday => idp

\data bool
  | true
  | false

\func negb (b : bool) : bool
  | true => false
  | false => true

\func andb ( b1 : bool) (b2 : bool) : bool \elim b1
  | true => b2
  | false => false

\func orb (b1 : bool) (b2 : bool) : bool \elim b1
  | true => true
  | false => b2

\lemma test_orb1 : orb true  false = true => idp

\lemma test_orb2 : orb false false = false => idp

\lemma test_orb3 : orb false true = true => idp

\lemma test_orb4 : orb true  true = true => idp

\func \infixl 6 && => andb

\func \infixl 5 || => orb

\lemma test_orb5 :  false || false || true = true => idp

\func nandb ( b1 : bool) ( b2 : bool) : bool => negb ( b1 && b2 )

\lemma test_nandb1 : nandb true false = true => idp

\lemma test_nandb2 : nandb false false = true => idp

\lemma test_nandb3 : nandb false true = true => idp

\lemma test_nandb4 : nandb true true = false => idp

\func andb3 (b1 : bool) (b2 : bool) (b3 : bool) : bool => b1 && b2 && b3

\lemma test_andb31 :                 andb3 true true true = true => idp

\lemma test_andb32 :                 andb3 false true true = false => idp

\lemma test_andb33 :                 andb3 true false true = false => idp

\lemma test_andb34 :                 andb3 true true false = false => idp

\data rgb
  | red
  | green
  | blue

\data color =>
  | black
  | white
  | primary rgb

\func monochrome (c : color) : bool
  | black => true
  | white => true
  | primary q => false

\func isred (c : color) : bool
  | black => false
  | white => false
  | primary red => true
  | primary _ => false

\data bit
  | B0
  | B1

\data nybble
  | Bits (b0 b1 b2 b3 : bit)

\func all_zero (nb : nybble) : bool
  | (Bits B0 B0 B0 B0) => true
  | _ => false

\module NatPlayground \where {
  \data nat
    | O
    | S nat

  \data nat'
    | stop
    | tick (foo : nat')

  \func pred (n : nat) : nat
    | O => O
    | S n' => n'
}

--\lemma ttt : suc (suc (suc (suc zero))) = zero => {?}

\func minustwo (n : Nat) : Nat
  | 0 => 0
  | 1 => 0
  | suc (suc n') => n'

\func evenb ( n : Nat) : bool
  | 0        => true
  | 1     => false
  | suc (suc n') => evenb n'

\func oddb (n : Nat) : bool => negb (evenb n)

\lemma test_oddb1 :    oddb 1 = true => idp

\lemma test_oddb2 :    oddb 4 = false => idp

\module NatPlayground2 \where {
  \func plus (n : Nat) (m : Nat) : Nat \elim n
    | 0 => m
    | suc n' => suc (plus n' m)

  \lemma plus3_2=5 : plus 3 2 = 5 => idp

  \func mult (n : Nat) (m : Nat) : Nat \elim n
    | 0 => 0
    | suc n' => plus m (mult n' m)

  \lemma mult_3_3=9 : mult 3 3 = 9 => idp

  \func minus (n m : Nat) : Nat
    | 0, _ => 0
    | suc _ \as n, 0 => n
    | suc n', suc m' => minus n' m'

  \lemma minus6_4=2 : minus 6 4 = 2 => idp
}

\open Nat

\func exp (base power : Nat) : Nat \elim power
  | 0 => 1
  | suc p => base * (exp base p)

\func factorial (n : Nat) : Nat
  | 0 => 1
  | suc n' \as n => n * factorial n'

\lemma test_factorial1 : factorial 3 = 6 => idp

\lemma test_factorial2 : factorial 5 = 120 => idp

\import Set
\import Logic

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n' => n'

\lemma natDiscr {m : Nat} : Not (0 = suc m) =>
  \lam h => coe (\lam i => matchT (h @ i)) () right
  \where{
    \func matchT (m : Nat) : \Prop
      | 0 => \Sigma
      | suc _ => Empty
  }

\lemma sucInj (m n : Nat) (p : suc m = suc n) : m = n => pmap pred p

\import Function

\func dec2bool {p : \Prop} (d : Dec p) : bool
  | yes _ => true
  | no _ => false

\func \infix 5 ?==  (n m : Nat) : Dec (n = m)
  | 0, 0 => yes idp
  | 0 , suc n => no natDiscr
  | suc n , 0 => no (\lam p => natDiscr (inv p))
  | suc m, suc n => \case ?== m n \with {
    | yes e => yes (pmap suc e)
    | no ne => no ( ne o sucInj m n )
  }

\func eqb  (n m : Nat) => dec2bool ( n ?== m)

\instance natDecidableEq {n m : Nat} : Decide (n = m)
  | decide => n ?== m

\open Nat
\import Arith.Nat

\func \infix 5 ?<= (n m : Nat) : Dec (n <= m)
  | 0, _ => yes (zero<=_)
  | suc _ \as n, 0 => no (\lam p => natDiscr (inv (NatLE.<=-antisymmetric p zero<=_)))
  | suc m , suc n => \case  m ?<= n \with {
    | yes p => yes (suc<=suc p)
    | no ne => no (\lam p => ne (NatLE.unsuc p) )
  }

\func leb (n m : Nat) => dec2bool (n ?<= m)

\instance natDecidable<= {n m : Nat} : Decide (n <= m)
  | decide => n ?<= m

\lemma test_led1 : leb 2 2 = true => idp

\lemma test_leb2 : leb 2 4 = true => idp

\lemma test_leb3 : leb 4 2 = false => idp

\func \infix 5 =? => eqb

\func \infix 5 <=? => leb

\import HLevel

\record \infix 4 < (n m : Nat)  {
  | le : n <= m
  | neq : Not (n = m)
}

\func \infix 5 ?< (n m : Nat) : Dec (n < m) => \case n ?<= m \with{
  | no n>m => no (\lam (cp : n < m) => n>m cp.le)
  | yes n<=m => \case n ?== m \with {
    | yes n=m => no (\lam (cp : n < m) => cp.neq n=m)
    | no n!=m => yes \new (n < m) n<=m n!=m
  }
}

\func \infix 5 <? (x y : Nat) => dec2bool (x ?< y)

\lemma test_ltb1 :  2 <? 2 = false => idp

\lemma test_ltb2 : 2 <? 4 = true => idp

\lemma test_ltb3 :  4 <? 2 = false => idp

\lemma  plus_O_n  (n : Nat) : n + 0 = n => idp

\lemma  plus_1_l (n : Nat) : n + 1 = suc n => idp

\lemma  mult_0_l (n : Nat) : n * 0 = 0 => idp

\lemma mult_S_1 (n m : Nat) (m=suc_n :  m = suc n) : m * (n + 1) = m * m =>
  \let p : n + 1 = m => plus_1_l n *> inv m=suc_n  \in path (\lam i => m * (p @ i))

\lemma plus_1_neq_0 (n : Nat) : (n + 1) =? 0 = false
  | 0 => idp
  | suc _ => idp

\lemma negb_involutive (b : bool) :  negb (negb b) = b
  | true => idp
  | false => idp

\lemma andb_commutative (b c : bool) :  andb b c = andb c b
  | true, true => idp
  | true, false => idp
  | false, true => idp
  | false, false => idp

\lemma andb3_exchange (a b c : bool) : andb (andb a b) c = andb a (andb b c)
  | true, true, true => idp
  | true, true, false => idp
  | true, false, true => idp
  | true, false, false => idp
  | false, true, true => idp
  | false, true, false => idp
  | false, false, true => idp
  | false, false, false => idp

\lemma plus_1_neq_0' (n : Nat) : (1 + n) =? 0 = false
  | 0 => idp
  | suc _ => idp

\lemma andb_true_elim2 (b c : bool) : andb b c = true -> c = true
  | true, true => id
  | true, false => id
  | false, true => \lam _ => idp
  | false, false => id

\lemma zero_nbeq_plus_1 (n : Nat): 0 =? (n + 1) = false
  | 0 => idp
  | suc _ => idp

\lemma identity_fn_applied_twice (f : bool -> bool)
                                 (p : \Pi (x : bool) -> f x = x)
                                 (b : bool) :  f (f b) = b =>
  path (\lam i => p ( p b @ i) @ i)

\lemma negation_fn_applied_twice (f : bool -> bool)
                                 (p : \Pi (x : bool) -> f x = negb x)
                                 (b : bool) :  f (f b) = b =>
  path (\lam i => p ( p b @ i) @ i) *> negb_involutive b

\lemma andb_eq_orb (b c : bool) : (andb b c = orb b c) -> b = c
  | true, true => id
  | true, false => inv
  | false, true => id
  | false, false => id



\import Equiv
\import Set.Fin

\class Finite (A : \Set) {
  | size : Nat
  | indexOf : A -> Fin size
  | byIndex : Fin size -> A
  \property finInj (a : A) : byIndex (indexOf a) = a
  \property finSurj (i : Fin size) : indexOf ( byIndex  i) = i
}

\instance finiteBool : Finite bool
  | size => 2
  | indexOf => index-of
  | byIndex => by-index
  | finInj  => injective
  | finSurj => surjective
  \where {
    \func index-of (b : bool) : Fin 2
      | true => fzero
      | false => fsuc fzero

    \func by-index (f : Fin 2) : bool
      | fzero => true
      | fsuc fzero => false
      | fsuc (fsuc fz)  => fin0-absurd fz

    \lemma injective (a : bool) : by-index ( index-of a) = a
      | true => idp
      | false => idp

    \lemma surjective (i : Fin 2) : index-of (by-index i) = i
      | fzero => idp
      | fsuc fzero => idp
      | fsuc (fsuc fz)  => fin0-absurd fz
  }


